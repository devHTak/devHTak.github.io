---
layout: post
title: Kotlin. 
summary: Kotlin Study
author: devhtak
date: '2024-05-16 21:41:00 +0900'
category: Kotlin Study
---

#### 클래스와 객체
- 객체 지향 프로그래밍(OOP): 객체간 상호작용으로서 표현하는 프로그래밍 방식
  ```kotlin
  class Bird {
      // property
      var name: String = "mybird"
      var wing: Int = 2
  
      // method
      fun fly() = println("Fly wing:$wing")
      fun sing(volume: Int) = println("Sing vol: $vol");
  }

  fun main() {
      var bird = Bird()
      bird.name = "coco"
      coco.fly()
      coco.sing(2)
  }
  ```
  - 추상화 / 인스턴스 / 상속 / 다형성 / 캡슐화 / 메시지 전송 / 연관
  - 프로퍼티 / 메소드 / 객체
- 생성자
  ```kotlin
  class Bird (var name: String = "NONAME", var wing: Int=2, var beak: String, var color: String){
      // 초기화 블록
      init {
          println("이름: $name, 날개 수: $wing")
      }

      // 부 생성자
      constructor(var beak: String, var color: String) {
          this.name = "NONAME"
          this.wing = 2
          this.beak = beak
          this.color = color
      }
  }
  ```
  - 객체가 만들어질 때 호출되는 함수
  - 주 생성자: 클래스 이름과 함께 생성자를 정의하며 초기화에 꼭 사용할 코드가 있다면 초기화 블록을 선언해야 한다.
  - 부 생성자: 클래스의 본문에 함수처럼 선언하여 여러 생성자를 둘 수 있다
- 상속: kotlin에서는 모든 클래스가 final하기 때문에 open 키워드로 상속이 가능하도록 해주어야 한다
  ```kotlin
  open class Bird(val name: String, val wing: Int) {
      fun fly() = println("Fly")
      fun sing(volume: Int) = println("wing: $wing"})
  }
  class Lark: Bird(name: String, wing: Int): Bird(name, wing) {
      fun singHighton() = println("Happy Song!")
  }
  class Parrot: Bird {
      val language: String = "KOREAN"
      constructor(name: String, wing: Int, language: String): super(name, wing) {
          this.language = language
      }
      fun speak() = println("Speak: $language")
  }  
  ```
  - 오버라이딩과 오버로딩은 자바와 동일한 개념
  - super와 this: super는 상속관계에서 상위클래스 호출, this는 현재 클래스 호출할 때 사용
  - 인터페이스를 다중 구현할 때 동일한 메서드는 <InterfaceName> 으로 지정할 수 있다
    ```kotlin
    super<InterfaceA>.hello() // InterfaceA에 hello() 호출
    super<InterfaceB>.hello() // InterfaceB에 hello() 호출
    ```
  - 접근제한자
    - private: 외부에서 접근할 수 있다.
    - protected: 상속 관계에서 접근 가능하며 그 외 외부에서 접근 불가능하다
    - internal: 동일한 모듈 내에서 접근 가능하며 다른 모듈에서는 접근 불가능하다
    - public(default): 어디서든 접근 가능하다
    - 패키지: 클래스, 메서드, 프로퍼티, 객체, 인터페이스는 패키지 내부 Top-Level에 직접 선언 가능하다
      - 다른 접근제한자는 동일하나 protected는 Top-Level에서 사용할 수 없다.
    - 생성자
      - 생성자에는 private, public, internal 접근 제한자를 줄 수 있다.

- 클래스 간의 관계
  - 연관: 2개의 서로 분리된 클래스가 연결을 가지는 관계로 단방향/양방향으로 연결되며 두 요소가 서로 다른 생명주기를 갖고 있다.
  - 의존: 한 클래스가 다른 클래스에 의존되어 있어 영향을 주는 관계
  - 집합: 연관관계와 거의 동일하나 특정 객체를 소유한다는 개념이 추가된 관계
  - 구성: 집합관계와 거의 동일하지만 특정 클래스가 어느 한 클래스의 부분이 되어 생명주기가 소유자 클래스에 의존되는 관계
  
#### 프로퍼티와 초기화

- Getter, Setter를 지정하지 않아도 자동으로 처리한다
  ```kotlin
  class User(val id:Int, var name: String, var age:Int)
  ```
- 지연 초기화와 위임
  - 코틀린에서는 프로퍼티를 선언하는 동시에 초기화를 해야 한다
  - lateinit을 통해 지연 초기화를 할 수 있다
    - var 로 선언된(가변) 프로퍼티만 사용 가능
    - 프로퍼티에 대한 getter, setter 사용 불가
  ```kotlin
  class Person {
      lateinit var name: String // 지연 초기화
      fun nameTest() {
          if(::name.isInitialized) {
              println("Initialized")
          } else {
              println("Not Initialized")
          } 
      }
  }
  fun main() {
      val kim = Person()
      kit.test(); // Not Initialized
      kim.name = "Kim"
      kim.test(); // Initialized
  }
  ```
  - 지연 초기화를 사용한 프로퍼티에 대해 초기화하지 않은 상태에서 접근하게 되면 예외가 발생한다.
    - UninitializedPropertyAccessException
  - by lay 정의를 통해 val(불변) 변수에 대한 블록 부분의 초기화를 진행할 수 있다.
    ```kotlin
    class Person {
        val name by lazy {
            println("Name initializing")
            "Kim"
        }

        fun callName() {
            println("Name: $name")
        }
    }
    fun main() {
      val kim = Kim()
      kim.callName() // by lazy 블록 실행 후 callName 내부 실행
    }
    ```
    - lazy는 세가지 모드를 제공
      - LazyThreadSafetyMode.SYNCHRONIZED: lock을 사용해 단일 스레드만이 사용되도록 보장(기본값)
      - LazyThreadSafetyMode.PUBLICATION: 여러 군데 호출 될 수 있으나 처음 초기화된 후 반환값을 사용
      - LazyThreadSafetyMode.NONE: lock을 사용하지 않기 떄문에 빠르지만 다중 스레드가 접근 가능

- 정적 변수와 컴패니언 객체
  - companion object를 사용하여 static 변수를 생성할 수 있다.
    ```kotlin
    class Person {
        var id: Int = 0
        var name: String = "Kotlin"
        companion object {
            var langauage: String = "Korean"
            fun work() = println("working")
        }
    }

    fun main() {
        println(Person.language) // Korean
        Person.work()
    }
    ```
  - Java에서 Companion키워드를 생략하기 위해서 @JvmStatic Annotation 사용 가능하며 프로퍼티 접근을 위해서는 @JvmField를 사용
    ```kotlin
    class Customer {
        companion object {
            const val LEVEL = "Intermediate"
            @JvmField
            val name: String = "Kim"
            @JvmStatic
            val login() = println("Login")
        }
    }

    // Java
    public static void main(String[] args) {
        Customer.LEVEL;
        Customer.Companion.login();
        Customer.login(); // @JvmStatic 으로 가능
        Customer.name;
    }
    ```
- object 와 싱글톤
  - 익명 내부 클래스를 만들 때 object 표현식이나 object 선언으로 조금 더 쉽게 처리 가능
  - object 선언: 접근 시점에 객체가 생성되기 떄문에 주, 부생성자를 사용 불가능하나 초기화 블록은 사용 가능하다. object 선언에서도 클래스나 인터페이스 상속이 가능하다
  ```kotlin
  object ObjectCustomer {
      var name = "Kim"
      var greeting() = println("Hello object")
  }

  class ClassCustomer {
      companion object {
          var name = "Lee"
          var greeting() = println("Hello companion object")
      }
  }

  fun main() {
      ObjectCustomer.name
      ObjectCustomer.greeting()

      ClassCustomer.name
      ClassCustomer.greeting()
  }
  ```
  - object 표현식: object 선언과 달리 이름이 없으며 싱글톤이 아니다. 따라서 사용할 때마다 새로운 인스턴스가 생성되며 결과적으로 익명 내부 클래스의 형태를 object vygustlrdmfh rngusgkf tn dlTek.
  ```kotlin
  open class Customer() {
      open fun work() = println("Working")
  }

  fun main() {
      var customer = object: Customer() {
          override fun work() = println("Working Customer")
      }
      customer.work() // Working Customer
  }
  ```

#### 다양한 클래스와 인터페이스
- 추상 클래스
  - 선언 등의 대략적인 설계 명세와 공통의 기능을 구현한 클래스다.
  - 추상 클래스를 상속하는 하위 클래스는 내용을 더 구체화해야 한다.
  - 코틀린에서 추상 클래스의 정의는 abstract 키워드를 사용한다.
  - 기본적으로 상속과 오버라이딩을 허용하기 때문에 open 키워드를 사용할 필요가 없다.
  ```kotlin
  abstract class Vehicle(val name: String) {
      abstract var maxSpeed: Double
      abstract fun start()
      fun displaySpecs() = println("$name, $maxSpeed")
  }
  class Car(name: String, override var maxSpeed: Double): Vehicle(name) {
      override fun start() = println("Start Car")
  }
  ```
- 인터페이스
  - 추상 메서드나 일반 메서드가 포함된다.
  - 코틀린의 인터페이스는 메서드에 구현 내용을 포함할 수 있다.
  - 프로퍼티는 상태를 저장할 수 없는 추상 프로퍼티로만 선언해야 한다.
  - 다수의 인터페이스를 상속할 수 있어 확장에 용이하다.
  - 인터페이스 변경시 구현 클래스에 영향이 적다.
  ```kotlin
  interface Pet {
      var category: String // 추상프로퍼티
      var messageTags: String
          get() = "My Lovely Pet"
      fun feeding()
  } 
  class Cat(override var category: String): Pet {
      override fun feeding() = println("Cat feeding")
  }
  ```
- 데이터 클래스
  - 코틀린은 데이터 전달을 위한 객체(DTO: DataTransfer Object)를 간략하게 표현할 수 있는 데이터 클레스를 제공한다.
    - 자바에 record
  - 데이터 클래스 조건
    - 주 생성자는 최소한 하나의 매개변수를 가져야 한다.
    - 주 생성자의 모든 매개변수는 val, var로 지정된 프로퍼티여야 한다.
    - 데이터 클래스는 abstract, open, sealed, inner 키워드를 사용할 수 없다.
  - 자동 생성 메서드
    - equals()
    - hashCode()
    - copy()
    - toString()
    - componentN(): 객체의 선언부 구조를 분해하기 위해 프로퍼티에 상응하는 메서드
  
- 내부 클래스
  - 중첩 클래스
    ```kotlin
    class Outer {
        class Nested {
            val value = 10
            fun greeting() = "Nested $val"
        }
    }
    fun main {
        println(Outer.Nested().greeting())
    }
    ```
    - 코틀린에서 중첩 클래스는 static class 처럼 다뤄져 객체 생성없이 접근할 수 있다.
  - 내부 클래스
    ```kotlin
    interface Swicher {
        fun on(): String
    }
    class Smartphone(val model: String) {
        private val cpu = "Exynos"
        //내부 클래스
        inner class ExternalStorage(val size: Int) {
            fun getInfo() = "$model: Installed on $cpu with $size GB"
        }
        fun powerOn(): String {
            // 지역 클래스
            class Led(val color: String) {
                fun blink():String = "Blinking $color on $model"
            }
            // 익명 객체
            val powerSwitch = object: Switcher {
                override fun on(): String = powerStatus.blink()
            }
            return powerSwitch.on()
        }
    }
    ```
    - 클래스의 내부에 클래스를 정의하는 것으로 내부 클래스는 외부 클래스의 멤버에 접근할 수 있다.
  - 지역 클래스
    - 특정 메서드의 블록이나 init 블록과 같이 블록 범위에서만 유효하다. 블록을 벗어나면 더이상 사용되지 않는다.
  - 익명 객체
    - 일회성으로 객체를 생성하여 사용할 수 있다. 익명 객체는 다중 인터페이스를 구현할 수 있다.
- 열거형 클래스(Enum Class)
  ```kotlin
  interface Score {
      fun getScore(): Int
  }
  enum class MemberType(var prio: String): Score {
      NORMAL("Secord") {
          override fun getScore(): Int = 100
      },
      SILVER("First") {
          override fun getScore: Int = 500
      }
  }
  ```
  - 여러개의 상수를 선언하고 열거된 값을 조건에 따라 선택할 수 있는 특수한 클래스
- 실드 클래스(Sealed Class)
  - 열거형 클래스의 확장으로 볼 수 있다. 같은 파일 안에서는 상속을 허용하지만 다른 파일에서는 상속이 불가능하게 제한할 수 있다.
