---
layout: post
title: Kotlin. 
summary: Kotlin Study
author: devhtak
date: '2024-05-16 21:41:00 +0900'
category: Kotlin Study
---

#### 클래스와 객체
- 객체 지향 프로그래밍(OOP): 객체간 상호작용으로서 표현하는 프로그래밍 방식
  ```kotlin
  class Bird {
      // property
      var name: String = "mybird"
      var wing: Int = 2
  
      // method
      fun fly() = println("Fly wing:$wing")
      fun sing(volume: Int) = println("Sing vol: $vol");
  }

  fun main() {
      var bird = Bird()
      bird.name = "coco"
      coco.fly()
      coco.sing(2)
  }
  ```
  - 추상화 / 인스턴스 / 상속 / 다형성 / 캡슐화 / 메시지 전송 / 연관
  - 프로퍼티 / 메소드 / 객체
- 생성자
  ```kotlin
  class Bird (var name: String = "NONAME", var wing: Int=2, var beak: String, var color: String){
      // 초기화 블록
      init {
          println("이름: $name, 날개 수: $wing")
      }

      // 부 생성자
      constructor(var beak: String, var color: String) {
          this.name = "NONAME"
          this.wing = 2
          this.beak = beak
          this.color = color
      }
  }
  ```
  - 객체가 만들어질 때 호출되는 함수
  - 주 생성자: 클래스 이름과 함께 생성자를 정의하며 초기화에 꼭 사용할 코드가 있다면 초기화 블록을 선언해야 한다.
  - 부 생성자: 클래스의 본문에 함수처럼 선언하여 여러 생성자를 둘 수 있다
- 상속: kotlin에서는 모든 클래스가 final하기 때문에 open 키워드로 상속이 가능하도록 해주어야 한다
  ```kotlin
  open class Bird(val name: String, val wing: Int) {
      fun fly() = println("Fly")
      fun sing(volume: Int) = println("wing: $wing"})
  }
  class Lark: Bird(name: String, wing: Int): Bird(name, wing) {
      fun singHighton() = println("Happy Song!")
  }
  class Parrot: Bird {
      val language: String = "KOREAN"
      constructor(name: String, wing: Int, language: String): super(name, wing) {
          this.language = language
      }
      fun speak() = println("Speak: $language")
  }  
  ```
  - 오버라이딩과 오버로딩은 자바와 동일한 개념
  - super와 this: super는 상속관계에서 상위클래스 호출, this는 현재 클래스 호출할 때 사용
  - 인터페이스를 다중 구현할 때 동일한 메서드는 <InterfaceName> 으로 지정할 수 있다
    ```kotlin
    super<InterfaceA>.hello() // InterfaceA에 hello() 호출
    super<InterfaceB>.hello() // InterfaceB에 hello() 호출
    ```
  - 접근제한자
    - private: 외부에서 접근할 수 있다.
    - protected: 상속 관계에서 접근 가능하며 그 외 외부에서 접근 불가능하다
    - internal: 동일한 모듈 내에서 접근 가능하며 다른 모듈에서는 접근 불가능하다
    - public(default): 어디서든 접근 가능하다
    - 패키지: 클래스, 메서드, 프로퍼티, 객체, 인터페이스는 패키지 내부 Top-Level에 직접 선언 가능하다
      - 다른 접근제한자는 동일하나 protected는 Top-Level에서 사용할 수 없다.
    - 생성자
      - 생성자에는 private, public, internal 접근 제한자를 줄 수 있다.

- 클래스 간의 관계
  - 연관: 2개의 서로 분리된 클래스가 연결을 가지는 관계로 단방향/양방향으로 연결되며 두 요소가 서로 다른 생명주기를 갖고 있다.
  - 의존: 한 클래스가 다른 클래스에 의존되어 있어 영향을 주는 관계
  - 집합: 연관관계와 거의 동일하나 특정 객체를 소유한다는 개념이 추가된 관계
  - 구성: 집합관계와 거의 동일하지만 특정 클래스가 어느 한 클래스의 부분이 되어 생명주기가 소유자 클래스에 의존되는 관계
  
#### 프로퍼티와 초기화
