---
layout: post
title: Kotlin. 
summary: Kotlin Study
author: devhtak
date: '2024-05-16 21:41:00 +0900'
category: Kotlin Study
---

#### 코틀린 시작하기
- 소개
  - 코틀린(Kotlin)은 젯브레인즈(JetBrains)에서 개발한 언어로 JVM 기반의 언어이며 Java 언어와 완벽하게 호환된다. 
  - JVM 뿐만 아니라 JS, Native상에서 실행 가능한 멀티플랫폼 언어이다. 구글의 안드로이드에서는 코틀린을 공식 언어로 채택하고 있다.
- 장점
  - 자료형 오류를 미리 잡을 수 있는 정적 언어: 프로그램이 컴파일될 때 자료형을 검사하기 때문에 오류를 초기에 발견하여 안정성이 뛰어남
  - 널 포인트 예외(NPE: NullPointerException)로 인한 프로그램의 중단을 예방
    - Non-null과 Nullable 타입의 구분, Safe calls, Safe casts, Elvis 연산자 등을 지원하여 NPE의 위험을 낮춘다.
  - 함수형 프로그래밍과 객체 지향 프로그래밍이 모두 가능한 다중 패러다임 언어
  
#### 변수와 자료형, 연산자

- 코틀린 패키지
  - 코틀린 프로젝트는 모듈, 패키지, 파일로 구성된다.
    - Project > Module > Package > File
  - 코틀린 기본 패키지: import 하지 않아도 바로 사용 가능
    - kotlin.* : Any, Int, Double 등 핵심 함수와 자료형
    - kotlin.text.* : 문자와 관련된 API
    - kotlin.sequences.* : 컬렉션 자료형의 하나로 반복이 허용되는 개체를 열거
    - kotlin.ranges.* : if문이나 for문에서 사용할 범위 관련 요소
    - kotlin.io.* : 입출력 관련 API
    - kotlin.collections.* : List, Set, Map 등의 컬랙션
    - kotlin.annotation.* : 애노테이션 관련 API

- 변수
  ```kotlin
  val username:String = "Kim"
  val age = 25
  var address // 오류 발생 - 타입을 추론할 수 없다
  ```
  - var(variable): 값을 변경할 수 있다.
  - val(value): 초기값을 지정하면 더 이상 값을 변경할 수 없다

- 자료형
  - Null을 허용한 변수 검사
    - null(값이 없는 상태)을 허용하기 위해 물음표 기호를 사용해 선언
    - null을 허용할 경우 null을 검사하고 처리하는 방법까지 고려해야 한다.
      - Safe calls: null이 할당되어 있을 가능성이 있는 변수를 검사하여 안전하게 호출
      - not-null 연산자: 변수에 할당된 값이 null이 아님을 단정하여 컴파일러가 null 검사를 생략, NPE가 발생 가능
      - Elvis 연산자: 변수가 null인지 아닌지 검사하여 null이면 왼쪽 식을 실행하고 null이면 오른쪽 식을 실행
    ```kotlin
    var str:String = "Hello Kotlin"
    str = null

    println("General Call: ${str.length}") // compile 오류
    println("Safe Call: ${str?.length}") // safe call null
    println("Not Null: ${str!.length}") // NPE 발생
    println("Elvis: ${str?.length ?: -1") // elvis -1 출력
    ```
  - 자료형 변환
    - 코틀린에서는 자료형이 다르면 변환 함수를 사용한다.
      - toLong(), toFloat(), toInt(), toDouble(), toShort(), toChar(), toByte(), toString
  - 자료형 검사
    ```kotlin
    when(e) {
        is Int -> println("Integer Type")
        is String -> println("String Type")
        else -> println("Other Type")
    }
    ```
    - is: 키워드를 통해 자료형을 검사한다.
    - as: 형변환이 가능하지 않으면 예외가 발생하기 때문에 Safe Call을 통해 안전하게 캐스팅할 수 있다.

#### 함수와 함수형 프로그래밍
- 함수 선언
  ```kotlin
  fun 함수이름([매개변수_이름: 자료형...]): [반환값의 자료형] {
      // ... 
      [return 반환값]
  }
  ```
  - 반환값이 없는 경우 생략 가능하며 Unit 자료형으로 추론
  - 매개변수
    ```kotlin
    // 기본값 설정
    fun add(a: Int, b: Int = 0) = a + b 
    // 매개변수 이름과 함께 함수 호출
    fun multiple(a: Int=2, b: Int) = a * b
    println(multiple(b=13)) // 26
    // 가변인자 사용
    fun add(vararg numbers: Int): Int {
        var sum = 0;
        for(number in numbers) {
            sum += number
        }
        return sum
    }
    ```
- 함수형 프로그래밍
  - 정의와 특징
    - 순수 함수를 사용: 동일한 인자에 대하여 항상 같은 결과를 반환
      - 같은 인자에 대하여 항상 같은 값을 반환하며, 함수 외부의 어떤 상태도 바꾸지 않는다.
    - 람다식을 사용할 수 있다.
      - 이름이 없는 함수 형태
    - 고차함수를 사용할 수 있다.
      - 다른 함수를 인자로 사용하거나 함수를 결과값으로 반환하는 함수를 말한다.
      ```kotlin
      fun highFunction(sum: (Int, Int) -> Int, a: Int, b: Int): Int = sum(a, b)

      println(highFunction({x,y} -> x+y, 10, 20)) // 30
      ```
  - 일급 객체: 함수형 프로그래밍에서는 함수를 일급 객체로 생각한다.
    - 일급 객체는 함수의 인자로 전달할 수 있으며 함수의 반환값으로도 사용할 수 있다.
    - 일급 객체는 변수에 담을 수 있다.
- 고차함수와 람다식
  - 일반 함수를 인자나 반환값으로 사용 가능하며 람다식을 인자나 반환값으로 사용할 수 있다.
    ```kotlin
    // 일반 함수 사용
    fun sum(a: Int, b: Int) = a + b
    fun multiple(a: Int, b: Int) = a * b

    val result1 = sum(3, 2) // 5
    val result2 = mul(sum(2,2), 2) // 8 인자에 함수 사용

    // 람다식 사용
    fun hignFunction(a: Int, b: Int, sum: (Int, Int) -> Int) = sum(a, b)
    val multi = {x:Int, y:Int -> x * y} // 일반 변수에 람다 할당

    val result1 = hignFunction(10, 20, {x, y ->  x + y})    
    ```
  - 람다식과 고차함수 호출
    ```kotlin
    // call by value
    fun callByValue(b: Boolean): Boolean {
        return b
    }
    val lambda: () -> Boolean = {
        true
    }
    callByBalue(lambda())

    // call by name
    fun callByName(b: () -> Boolean) {
        return b()
    }
    val otherLambda: () -> Boolean = {
        return true
    }
    callByName(otherLambda)
    ```
  - 함수를 인자 또는 변수에 할당
    ```kotlin
    fun sum(x:Int, b:Int) = x + y
    fun sumParamFunction(a: Int, b: Int, sum: (Int, Int) -> Int) = sum(a, b)

    sumParamFunction(10, 20, ::sum) // 30
    val sumLikeLambda = ::sum
    sumLikeLambda(10, 20) // 30
    ```
  - 매개변수
    ```
    // 없는 경우
    fun noParam(out: () -> String) = println(out())
    noParam({ "Hello Kotlin" })
    noParam { "Hello Kotlin" } // 위와 동일 결과, 소괄호 생략 가능
    
    // 1개 있는 경우
    fun oneParam(out: (String) -> String) = println(out("OneParam"))   
    oneParam({ a -> "Hello Kotlin $a" })
    oneParam { "Hello Kotlin $it" } // 위와 동일 결과, 매개변수가 1개인 경우 it으로 대체 가능
    
    // 2개 이상인 경우
    fun moreParam(out: (String, String) -> String) = println(out("OneParam", "TwoParam"))    
    moreParam { a, b -> "Hello Kotlin $a $b" } // 매개변수 이름 생략 불가
    moreParam { _, b -> "Hello Kotlin $b" } // 첫 번째 문자열은 사용하지 않고 생략
    
    /* 일반 매개변수와 람다식 매개변수를 같이 사용하는 경우 */
    fun withArgs(a: String, b: String, out: (String, String) -> String) = println(out(a, b))
    withArgs("Arg1", "Arg2", { a, b -> "Hello Kotlin $a $b" })
    withArgs("Arg1", "Arg2") { a, b -> "Hello Kotlin $a $b" } // 함수의 마지막 인자가 람다식인 경우 소괄호 바깥으로 분리 가능

- 인라인 함수
- 확장 함수
  ```kotlin
  fun String.getLongString(target: String): String -> if(this.length > target.length) this else target
  "Kotlin".getLongString("Hello")
  ```
  - 코틀린은 기존의 클래스에 원하는 함수를 포함시켜 확장하는 개념을 제공

#### 프로그램의 흐름 제어
- 조건문
  - if / else / else if
    ```kotlin
    val a = 10
    val b = 20
    if(a > b) {
        println(a)
    } else if(a < b) {
        println(b)
    } else {
      println("same")
    }
    // kotlin의 if 문 Expression이다
    var max = if(a > b) a else b
    ```
    - Expression: 하나의 값으로 도출되는 문장
    - Statement: 프로그램의 문장, 하나의 값으로 도출되지 않는다.
  - when 
    - 자바의 switch 처럼 case 별로 사용할 수 있다
    ```kotlin
    fun typeCheck(obj: Any) {
        when (obj) {
            is Int -> println("Int: $obj")
            is String -> println("String: $obj")
            !is String -> println("Not a String")
            else -> println("Unknown")
        }
    }
    ```
- 반복문
  - for 문
    ```kotlin
    /* 상향식 */
    var sum = 0
    for (num in 1..10) sum += num
    println("Sum: $sum") // 55
    
    /* 하향식 */
    var sum = 0
    for (num in 10 downTo 1) sum += num
    println("Sum: $sum") // 55
    
    /* step 키워드 사용으로 홀수 덧셈 */
    var sum = 0
    for (num in 1..10 step 2) sum += num
    println("Sum: $sum") // 25
    ```
  - while 문
    ```kotlin
    /* while문으로 팩토리얼 계산 */
    var number = readLine()?.toInt() ?: 0
    var factorial: Long = 1
    
    while (number > 0) {
        factorial *= number
        number -= 1
    }
    println("Factorial: $factorial")
    ```
  - do while 문
    ```kotlin
    /* 1부터 N까지 덧셈 */
    do {
        println("Enter an integer: ")
        val n = readLine()?.toInt ?: 0
        var sum = 0
    
        for (num in 1..n) {
            sum += num
        }
        if (sum != 0) println("Sum: $sum")
    } while (n != 0)
    ```
- 예외처리문
  ```kotlin
  try {
      // 예외 발생 가능성 있는 문장
  } catch (e: 예외 처리 클래스 이름) {
      // 예외를 처리하기 위한 문장
  } finally {
      // 반드시 실행되어야 하는 문장
  }
  ```
