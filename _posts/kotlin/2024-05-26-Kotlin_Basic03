---
layout: post
title: Kotlin. 
summary: Kotlin Study
author: devhtak
date: '2024-05-26 21:41:00 +0900'
category: Kotlin Study
---

#### 제네릭과 배열
- 제네릭
  ```kotlin
  class Box<T>(var name: T)
  ```
  - 클래스 내부에서 사용할 자료형을 나중에 인스턴스를 생성할 때 확정한다. 
  - 객체의 자료형을 컴파일할 때 체크하기 때문에 객체 자료형의 안정성을 높이고 형 변환의 번거러움을 줄일 수 있다.
  - 제네릭으로 선언된 변수를 프로퍼티를 사용하는 경우 생성자를 통해 초기값을 지정하며, 형식 매개변수는 기본적으로 null을 허용한 형태로 선언된다
    ```kotlin
    fun <T> find(a: Array<T>, target: T): Int {
        for(i in a.indices) {
            if(a[i] == target) return i
        }
        return -1
    }
    ```
  - 람다식을 매개변수로 받으면 자료형을 결정하지 않아도 실행 시 람다식 본문을 넘겨줄 때 결정되어 오류를 해결할 수 있다.
    ```kotlin
    fun <T> add(a: T, b: T, op: (T, T) -> T) = op(a, b)

    fun main() {
        println(add(10, 20) { a, b -> a+b}) // 30
    }
    ```
  - 콜론(:)을 사용하여 매개변수를 받은 특정한 자료형으로 제한할 수 있다.
    ```kotlin
    class Car<T: Number> {
        fun plus(arg1: T, arg2: T): Double= arg1.toDouble() arg2.toDouble()
    }
    fun <T: Number> addNumber(a: T, b: T, op: (T, T) -> T): T = op(a, b)
    ```
  - 상하위 형식의 가변성
    - 가변성이란 형식 매개변수가 클래스 계층에 영향을 주는 것을 만든다.
      - 예를 들어, 형식 A의 값이 필요한 모든 클래스에 B의 값을 넣어도 아무 문제 없다면 B는 A의 하위 형식이 된다.
    - Any <- Int <- Notiing
    - 무변성: 자료형 사이의 하위 관계가 성립되지 않는다.
      - 코틀린에서는 따로 지정해주지 않으면 기본적으로 무변성이다.
      ```kotlin
      class Box<T>(val size: Int)
      fun main() {
          val anys1: Box<Any> = Box<Int>(10) // 오류 / 자료 불일치
          val anys2: Box<Noting> = Box<Int>(10) // 오류 / 자료 불일치
      }
      ```
    - 공변성(out keyword): 형식 매개변수 사이의 하위 자료형 관계가 성립하고, 그 관계가 인스턴스 자료형 관계로 이어진다.
    - 반공변성(in keyword): 공변성과 반대 개념
      ```kotlin
      class BoxOut<out T>(val size: Int)
      class BoxIn<in T>(val size: Int)
      fun main() {
          val anyOut: Box<Any> = Box<Int>(10) // 공변성
          var anyIn: Box<Noting> = Box<int>(20) // 반공변성
      }
    - 가변성의 두가지 방법
      ```kotlin
      class Box<in T:Animal>(var item: T)
      ```
      - 선언 지점 변성(Declaration-Site Variance): 클래스 자체에 가변성을 지정하는 방식이다.
      ```kotlin
      class Box<T>(var item: T)
      fun <T> printBox(box: Box<out Animal>) {
          val object: Animal = box.item
          println(object);
      }
      - 사용 지점 변성(Use-Site Variance): 메서드의 매개변수나 제네릭 클래스를 생성할 때와 같이 사용 위치에서 가변성을 지정하는 방식이다.
    - 자료형 프로젝션(Type Projection): 사용하고자 하는 요소의 특정 자료형에 in 또는 out을 지정해 제한하는 것을 말한다. 자료형 프로젝션을 통해 자료의 안정성을 보장한다.
    - 스타 프로젝션(Star Projection): 어떤 자료형이라도 들어올 수 있으나 구체적으로 자료형이 결정되면 그 자료형과 하위 자료형의 요소만 허용한다.
      - in으로 정의된 형식 매개변수를 *로 받으면 in Nothing으로 간주
      - out으로 정의된 형식 매개변수를 *로 받으면 out Any?으로 간주
    - refied 자료형
      ```kotlin
      fun main() {
          println(getType<Float>(10)); // 10
      }
      inner fun <reified T> getType(value: Int>:T {
          return when(T::class) {
              Float::class -> value.toFloat() as T
              Int::class -> value ad T
              else -> throw IllegalStateException()
          }
      }
      ```
      - inline 함수에서 형식 매개변수를 실행 시간에 직접 접근하기 위해 사용
      
  - 배열
