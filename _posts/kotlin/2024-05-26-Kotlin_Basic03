---
layout: post
title: Kotlin. 
summary: Kotlin Study
author: devhtak
date: '2024-05-26 21:41:00 +0900'
category: Kotlin Study
---

#### 제네릭과 배열
- 제네릭
  ```kotlin
  class Box<T>(var name: T)
  ```
  - 클래스 내부에서 사용할 자료형을 나중에 인스턴스를 생성할 때 확정한다. 
  - 객체의 자료형을 컴파일할 때 체크하기 때문에 객체 자료형의 안정성을 높이고 형 변환의 번거러움을 줄일 수 있다.
  - 제네릭으로 선언된 변수를 프로퍼티를 사용하는 경우 생성자를 통해 초기값을 지정하며, 형식 매개변수는 기본적으로 null을 허용한 형태로 선언된다
    ```kotlin
    fun <T> find(a: Array<T>, target: T): Int {
        for(i in a.indices) {
            if(a[i] == target) return i
        }
        return -1
    }
    ```
  - 람다식을 매개변수로 받으면 자료형을 결정하지 않아도 실행 시 람다식 본문을 넘겨줄 때 결정되어 오류를 해결할 수 있다.
    ```kotlin
    fun <T> add(a: T, b: T, op: (T, T) -> T) = op(a, b)

    fun main() {
        println(add(10, 20) { a, b -> a+b}) // 30
    }
    ```
  - 콜론(:)을 사용하여 매개변수를 받은 특정한 자료형으로 제한할 수 있다.
    ```kotlin
    class Car<T: Number> {
        fun plus(arg1: T, arg2: T): Double= arg1.toDouble() arg2.toDouble()
    }
    fun <T: Number> addNumber(a: T, b: T, op: (T, T) -> T): T = op(a, b)
    ```
  - 상하위 형식의 가변성
    - 가변성이란 형식 매개변수가 클래스 계층에 영향을 주는 것을 만든다.
      - 예를 들어, 형식 A의 값이 필요한 모든 클래스에 B의 값을 넣어도 아무 문제 없다면 B는 A의 하위 형식이 된다.
    - Any <- Int <- Notiing
    - 무변성: 자료형 사이의 하위 관계가 성립되지 않는다.
      - 코틀린에서는 따로 지정해주지 않으면 기본적으로 무변성이다.
      ```kotlin
      class Box<T>(val size: Int)
      fun main() {
          val anys1: Box<Any> = Box<Int>(10) // 오류 / 자료 불일치
          val anys2: Box<Noting> = Box<Int>(10) // 오류 / 자료 불일치
      }
      ```
    - 공변성(out keyword): 형식 매개변수 사이의 하위 자료형 관계가 성립하고, 그 관계가 인스턴스 자료형 관계로 이어진다.
    - 반공변성(in keyword): 공변성과 반대 개념
      ```kotlin
      class BoxOut<out T>(val size: Int)
      class BoxIn<in T>(val size: Int)
      fun main() {
          val anyOut: Box<Any> = Box<Int>(10) // 공변성
          var anyIn: Box<Noting> = Box<int>(20) // 반공변성
      }
    - 가변성의 두가지 방법
      ```kotlin
      class Box<in T:Animal>(var item: T)
      ```
      - 선언 지점 변성(Declaration-Site Variance): 클래스 자체에 가변성을 지정하는 방식이다.
      ```kotlin
      class Box<T>(var item: T)
      fun <T> printBox(box: Box<out Animal>) {
          val object: Animal = box.item
          println(object);
      }
      - 사용 지점 변성(Use-Site Variance): 메서드의 매개변수나 제네릭 클래스를 생성할 때와 같이 사용 위치에서 가변성을 지정하는 방식이다.
    - 자료형 프로젝션(Type Projection): 사용하고자 하는 요소의 특정 자료형에 in 또는 out을 지정해 제한하는 것을 말한다. 자료형 프로젝션을 통해 자료의 안정성을 보장한다.
    - 스타 프로젝션(Star Projection): 어떤 자료형이라도 들어올 수 있으나 구체적으로 자료형이 결정되면 그 자료형과 하위 자료형의 요소만 허용한다.
      - in으로 정의된 형식 매개변수를 *로 받으면 in Nothing으로 간주
      - out으로 정의된 형식 매개변수를 *로 받으면 out Any?으로 간주
    - refied 자료형
      ```kotlin
      fun main() {
          println(getType<Float>(10)); // 10
      }
      inner fun <reified T> getType(value: Int>:T {
          return when(T::class) {
              Float::class -> value.toFloat() as T
              Int::class -> value ad T
              else -> throw IllegalStateException()
          }
      }
      ```
      - inline 함수에서 형식 매개변수를 실행 시간에 직접 접근하기 위해 사용      
- 배열
  - kotlin은 배열을 여러 가지 자료형을 혼합하여 구성할 수 있으며 다차원 배열 선언도 가능하다 
    ```kotlin
    val numbers = arrayOf(6, 8, "Kim", "Lee")
    var arr2D = arrayOf(arrayOf(1, 2, 3), arrayOf(4, 5, 6), arrayOf(7, 8, 9))

    val evenArray = Array<Int>(5) {it * 2} // [0, 2, 4, 6, 8] 
    val array1 = arrayOfNulls<Int>(100) // 100개의 null로 채워진 정수 배열
    val array2 = Array<Int>(1000) {0} // 1000개의 0으로 채워진 정수 배열
    ```
  - 배열 접근은 get, set 또는 \[index] 로 가능하다
    ```kotlin
    public class Array<T> {
        public inline constructor(size: Int, init: (Int) -> T)
        public operator fun get(index: Int): T
        public operator fun set(index: Int, value: T): Unit
        public operator fun size(): Int
        public operator fun iterator(): Iterator<T>
    }
    array.get(index)
    array.set(index, value)
    value = array[index]
    array[index] = value
    ```
  - 다양한 방법의 배열 다루기
    - 배열에 요초 추가 및 잘라내기
      ```kotlin
      var arr1 = arrayOf<Int>(1, 2, 3)
      var arr2 = arr1.plus(4) // 1, 2, 3, 4
      var arr3 = arr1.sliceArray(1..2) // 2, 3
      ```
    - 배열 순환
      ```kotlin
      var arr1 = arrayOf<Int>(1, 2, 3)
      arr1.forEach {e -> println("$e"}
      arr1.forEachIndexed {i, e -> println("array[$i]: $e")}
      var iter: Iterator<Int> = array.iterator()
      while(iter.hasNext()) {
          val e = iter.next()
          println("$e")
      }
      ```
    - 오름차순 정렬
      - 일반 배열로 반환: sortedArray(), 원본배열정렬: sort()
    - 내림차순 정렬
      - 일반 배열로 반환: sortedArrayDescending(), 원본 배열 정렬: sortDescending()
    - sortBy를 이용한 특정 표현식 사용
      items.sortBy { item -> item.length }
    - 배열 필터링
      - filter {it > 0}
    - 배열 평탄화
      - flatten() // 1차원 배열
- 문자열 다루기
  - 문자열은 불변(immutable) 값으로 생성되기 때문에 참조되고 있는 메모리가 변경될 수 없다. 더 이상 참조되지 않는 문자열은 GC(Garbage Collector)에 의해 제거된다.
  - 문자열 추출
    - String.substring(index_범위): String
    - CharSequence.subSequence(index_범위): CharSequence
  - 문자열 비교
    - stringA.compareTo(stringB) // A==B: 0, A<B: 음수, A<B양수
    
#### Collection
- 컬렉션 종류
  - List: listOf(불변), mutableListOf/arrayListOf(가변)
  - Set: setOf(불변), mutableSetOf/hashSetOf/linkedSetOf/sortedSetOf(가변형)
  - Map: mapOf(불변), mutableMapOf/hashMapOf/linkedMapOf/sortedMapOf(가변형
- Collection 인스턴스 멤버
  - isEmpty()
  - contains(element:E)
  - containsAll(element:Collection<E>)
- MutableCollection 인스턴스 메서드
  - add(element:E)
  - remove(element:E)
  - addAll(elements:Collection<E>)
  - removeAll(elements:Collection<E>)
  - retainAll(elements:Collection<E>)
  - clear()
- List 활용하기
  - 불변형 List
    - 불변형 List 생성 핼퍼 함수
      - listOf(): 가변 인자를 받아 원하는 만큼 요소를 지정할 수 있다. List<T>를 반환하며 형식 매개변수를 지정하지 않으면 기본값인 <Any>를 사용한다.
      - emptyList(): 비어있는 List를 생성하기 위해 사용한다. 이때 반드시 형식 매개변수를 지정한다.
      - listOfNotNull(): null을 제외한 요소만 List로 구성한다.
    - List의 주요 멤버 메서드
      - get(index: Int)
      - indexOf(element: E)
      - lastIndexOf(element: E)
      - listIterator()
      - subList(fromIndex: Int, toIndex: Int)
  - 가변형 List
    - 가변형 List 생성 핼퍼 함수
      - arrayListOf(): 가변형 List를 생성하지만 반환 자료형은 자바의 ArrayList다
      - mutableListOf(): 코틀린의 MutableList 인터페이스를 사용하는 헬퍼 함수다.
- Set 활용하기
  - 불변형 Set
    - setOf(): 불변형 Set인 Set<T> 자료형을 반환한다.
  - 가변형 Set
    - mutableSetOf(): 가변형 Set인 MutableSet<T> 자료형을 반환하지만, 내부적으로자바의 LinkedHashSet을 생성한다.
    - hashSetOf(): 해시 테이블에 요소를 자장할 수 있는 자바의 HashSet 컬렉션을 생성한다. 요소의 추가와 삭제가 가능하며 O(1) 시간복잡도의 검색 속도를 갖는다.
    - sortedSetOf(): 자바의 TreeSet 컬렉션을 정렬된 상태로 반환한다. HashSet보다 성능이 조금 떨어지지만 검색과 정렬이 뛰아나다는 장점이 있다.
    - linkedSetOf(): 자바의 LinkedHashSet 자료형을 반환한다. 링크드 리스트(Linked List) 자료구조를 사용해 구현된 해시 테이블에 요소를 저장한다.
- Map 활용하기
  - 생성 헬퍼 함수
    - mapOf():	불변형 Map 컬렉션을 만들 수 있다.
    - mutableMapOf(): 추가, 삭제가 가능한 가변형 Map을 정의한다.
    - hashMapOf(): 해시 테이블에 요소를 자장할 수 있는 자바의 HashMap 컬렉션을 생성한다.
    - sortedMapOf(): 자바의 TreeMap 컬렉션을 정렬된 상태로 반환한다.
    - linkedMapOf(): 자바의 LinkedHashMap 자료형을 반환한다.
  - 불변형 Map 프로퍼티와 메소드
    - size: Map 컬렉션의 크기를 반환한다.
    - keys: Map의 모든 키를 반환한다.
    - values: Map의 모든 값을 반환한다.
    - isEmpty(): Map이 비어 있는지 확인한다. 비어있으면 true, 아니면 false를 반환한다.
    - containsKey(key: K): 인자에 해당하는 키가 있으면 true, 아니면 false를 반환한다.
    - containsValue(value: V): 인자에 해당하는 값가 있으면 true, 아니면 false를 반환한다.
    - get(key: K): 키에 해당하는 값을 반환한다. 존재하지 않으면 null을 반환한다.
  - 가변형 Map 멤버 메소드
    - put(key: K, value: V): 키와 값의 쌍을 Map에 추가한다.
    - remove(key: K): 키에 해당하는 요소를 Map에서 제거한다.
    - putAll(from: Map<out K, V>): 인자로 주어진 Map 데이터를 갱신하거나 추가한다.
    - clear(): 모든 요소를 지운다.
- 컬렉션의 확장 함수
  - 확장 함수 범주
    - 연산자 기능, 집계 기능, 검사 기능, 필터링 기능, 변환 기능의 메서드가 존재한다.
    ```kotlin
    // 연산자 기능
    val numbers = mutableListOf("one", "two", "three")
    numbers += "four"
    numbers -= "two"

    // 순환
    numbers.forEach { println(it) } // one three four
    numbers.forEachIndexed { index, value -> println("$index value") } // 0 one ...
    val lambdaNumbers = numbers.onEach { println(it) } // 각 요소를 람다로 처리 후 컬렉션 반환

    //집계
    val intNumbers = listOf(1, 2, 3)
    val map = mapOf(0 to "zero", 1 to "one", 2 to "two")
    intNumbers.sumBy { it } // 6
    intNumbers.count {it % 2 == 0 } // 1
    intNumbers.maxOrNull() // 3
    intNumbers.minOrNull() // 1

    // 정해진 식 적용하기 (fold와 reduce에 차이는 초기값 지정 여부)
    intNumbers.fold(4) {total, next -> total + next } // 4 + 1 + 2 + 3 = 10
    intNumbers.foldRight(4) {total, next -> total * next } 4 * 3 * 2 * 1 = 24
    intNumbers.reduce { total, next -> total + next } // 1 + 2 + 3 = 6

    // 요소 검사
    intNumbers.all { it < 10 } // true
    intNumbers.any { it % 2 == 0 } // true
    intNumbers.contains(2) // true
    intNumbers.containsAll(listOf(1, 2)) // true
    intNumbers.none() // false
    intNumbers.non { it > 5 } // true

    // 필터
    list.filter { it % 2 == 0 } // [2]
    list.filterNot { it % 2 == 0 } // [1, 3]
    list.filterNotNull() [ 1, 2, 3]
    list.filterIndexed { index, value -> index != 1 && value != 3 } // [1]
    map.filterKeys { it % 2 == 0 } // {1=one}
    map.filterValues { it % 2 == 0} // {1=one}

    // 특정 범위를 잘라내거나 반환
    // slice: 특정 인덱스의 요소들을 잘라서 반환하기
    println("slice: " + intNumbers.slice(listOf(0, 2))) // [1]
    // take: n개의 요소를 반환
    println(list.take(2)) // [1, 2] - 앞의 2개 요소
    println(list.takeLast(2)) // [2, 3] - 뒤의 2개 요소
    println(list.takeWhile { it < 2 }) // [1] - 조건의 요소
    // drop: 처음부터 n개의 요소를 제외한 List 반환
    println(list.drop(2)) // [3] - 앞의 4개 제외한 요소
    println(list.dropWhile { it < 2 }) // [3] - 앞의 조건의 요소 제외
    println(list.dropLastWhile { it > 1 }) // [1] - 뒤의 조건의 요소 제외
    list.component2() // 2
    listOf(2, 3, 3, 4, 5, 5).distinct() // 2, 3, 4, 5
    intNumbers.intersect(listOf(2, 3, 4, 5)) // 2, 3
    // 매핑
    // map: 컬렉션에 주어진 식을 적용해 새로운 컬렉션을 반환
    intNumbers.map { it * 2 }) // [2, 4, 6]
    // mapIndexed: 컬렉션에 인덱스를 포함해 주어진 식을 적용해 새로운 컬렉션 반환
    intNumbers.mapIndexed { index, element -> index * element } // [0, 2, 6]
    // mapNotNull: null을 제외하고 식을 적용해 새로운 컬렉션 반환
    intNumbers.mapNotNull { it?.times(2) }) // [2, 4, 6]
    // flatMap: 각 요소에 식을 적용 후 다시 합쳐 새로운 컬렉션을 반환
    intNumbers.flatMap { listOf(it, 'A') }) // [1, A, 2, A, 3, A]
    listOf("abc", "12").flatMap { it.toList() } // [a, b, c, 1, 2]
    // groupBy: 주어진 함수의 결과에 따라 그룹화하여 map으로 반환
    val groupMap = intNumbers.groupBy { if (it % 2 == 0) "even" else "odd" }
    println(groupMap) // {odd=[1, 3], even=[2]}

    요소 처리와 검색
    // elementAt: 인덱스에 해당하는 요소 반환
    intNumber.elementAt(1)) // 2
    // elementAtOrElse: 인덱스를 벗어나는 경우 식의 결과를 반환에 따라 결과 반환
    intNumbers.elementAtOrElse(10) { 2 * it }) // 20
    // elementAtOrNull: 인덱스를 벗어나는 경우 null 반환
    intNumbers.elementAtOrNull(10)) // null
    // first: 식에 일치하는 첫 요소 반환
    val listPair = listOf(Pair("A", 300), Pair("B", 200), Pair("C", 100), Pair("D", 200))
    listPair.first { it.second == 200 } // (B, 200)
    // last: 식에 일치하는 마지막 요소 반환
    listPair.last { it.second == 200 } // (D, 200)
    // firstOrNull: 식에 일치하지 않는 경우 null 반환
    listPair.firstOrNull() { it.first == "E" } // null
    // lastOrNull: 식에 일치하지 않는 경우 null 반환
    listPair.lastOrNull() { it.first == "E" } // null
    // indexOf: 주어진 요소에 일치하는 첫 인덱스 반환
    intNumbers.indexOf(2) // 3
    // indexOfFirst: 람다식에 일치하는 첫 요소의 인덱스 반환, 없으면 -1
    intNumbers.indexOfFirst { it % 2 == 0 } // 1
    // lastIndexOf: 주어진 요소에 일치하는 가장 마지막 인덱스 반환
    intNumbers.lastIndexOf(2) // 1
    // indexOfLast: 람다식에 일치하는 마지막 요소의 인덱스 반환, 없으면 -1
    intNUmbers.indexOfLast { it % 2 == 0 }) // 1
    // single: 람다식에 일치하는 요소 하나 반환
    listPair.single { it.second == 100 } // (C, 100)
    listPair.singleOrNull { it.second == 500 } // null
    // binarySearch: 요소에 대해 이진 탐색 후 인덱스 반환
    intNumbers.binarySearch(2) // 1
    // find: 조건식을 만족하는 첫 번째 검색된 요소 반환, 없으면 null
    intNumbers.find { it >= 2 } // 1

    // 컬렉션의 분리와 병합
    val list1 = listOf(1, 2, 3, 4)
    val list2 = listOf(2, 2, 3, 4, 5, 5)
    // union: 두 List를 병합(중복 요소는 하나만)
    list1.union(list2) // [1, 2, 3, 4, 5]
    // plus: 두 List를 병합(중복 요소 포함), + 연산자와 동일 연산
    list1.plus(list2) // [1, 2, 3, 4, 2, 2, 3, 4, 5, 5]
    // partition: 주어진 식에 따라 2개의 컬렉션으로 분리해 Pair로 반환
    list1.partition { it % 2 == 0 } // [2,4], [1,3]
    // zip: 동일 인덱스끼리 Pair를 만들어 반환
    list1.zip(list2) // [(1, 2), (2, 2), (3, 3), (4, 4)]

    // 순서와 정렬
    // reversed: 뒤집힌 순서로 컬렉션 반환
    intNumbers.reversed() // [3, 2, 1]
    // sorted: 요소를 정렬한 후 정렬된 컬렉션 반환
    intNumbers.sorted()) // [1, 2, 3]
    // sortedDescending: 내림차순 정렬
    intNumbers.sortedDescending() // [3, 2, 1]
    // sortedBy: 특정 비교식에 의해 정렬된 컬렉션 반환환
    intNumbers.sortedBy { it % 3 } // [3, 1, 2]
    intNumbers.sortedByDescending { it % 3 }) // [2, 1, 3]
    ```
- 시퀀스
  - 시퀀스(Sequence) 란 순차적인 컬렉션으로 요소의 크기를 특정하지 않고, 나중에 결정할 수 있는 특수한 컬렉션이다. 
  - 처리 중에는 계산하지 않다가 toList()나 count() 같은 최종 연산에 의해 결정된다.

#### 코틀린 표준 함수

#### 파일 입출력
- 코틀린 입출력 API
  - 코틀린의 표준 라이브러리는 kotlin.io 패키지로 자바 라이브러리를 확장한 것
    - java.io.File -> 파일 처리
    - java.io.InputStream -> 바이트 단위의 입력 처리
    - java.io.OutputStream -> 바이트 단위의 출력 처리
    - java.io.Reader -> 문자 기반 읽기 처리
    - java.io.Writer -> 문자 기반 쓰기 처리
    - java.io.BufferedReader -> 버퍼를 가진 읽기 처리
- IO/NIO 개념
  - 자바에서 입출력을 위한 기본적인 패키지 java.io와 기능이 대폭 확장된 java.nio 패키지가 있다. 
  - nio(New Input Output)는 자바 7부터 강화된 라이브러리
    - io: 스트림 방식으로 Non-buffer, 비동기를 지원하지 않는다(Blocking)
    - nio: 채널 방식으로 Buffer 사용, 비동기를 지원한다(NonBlocking)
  - 스트림과 채널
    - Stream 방식은 데이터가 흘러가는 방향성에 따라 입력 스트림(InputStream)과 출력 스트림(OutputStream)으로 구분되기 때문에 양방향성을 가지는 작업을 할 때 별로도 지정해야한다.
    - Channel 방식은 양방향으로 입력과 출력이 모두 가능하기 때문에 입출력을 별도로 지정하지 않아도 된다. 채널을 위한 nio 패키지는 다음과 같다.  
  - NonBuffer vs Buffer
    - 스트림 방식(넌버퍼)에서 1바이트(Byte)를 쓰면 입력 스트림이 1바이트를 읽기 때문에 버퍼를 사용해 데이터를 읽는 것보다 상당히 느리게 동작한다.
    - java.nio 방식은 기본적으로 버퍼를 사용하는 입출력을 하기 때문에 더 나은 성능을 보여준다.
    - java.io 방식에서는 버퍼와 병합해 사용하는 BufferedInputStream과 BufferedOutputStream을 제공해 사용하기도 한다.
  - 블로킹과 넌블로킹
    - Blocking 이란 공간에 쓰기나(write) 읽기(read)가 불가능하여 호출한 코드에서 계속 멈춰있는 것을 말한다.
    - Non-blocking 이란 메인 코드의 흐름을 방해하지 않도록 입출력 작업 시 스레드나 비동기 루틴에 맡겨 별개의 흐름으로 작헙하는 것을 말한다.
