---
layout: post
title: DB 동시성 제어 - DB Lock과 Redis 분산락
summary: DB 동시성 제어
author: devhtak
date: '2023-10-05 21:41:00 +0900'
category: SQL
---

#### 동시성 제어

- 동시성 제어를 해야하는 이유
  - Race Condition
    - 여러 스레드가 동시에 같은 데이터를 접근하여 값을 변경하는 경우 데이터에 예상치 못한 변경이 발생할 수 있다. 
  - Deadlock
    - 두 개 이상의 스레드가 서로의 작업이 완료될 떄까지 기다리면서 결국 완료되지 않는 문제가 발생할 수 있다.
  - Data Corruption
    - 여러 스레드가 동시에 같은 데이터에 접근하여 값을 변경할 때, 예상치 못한 데이터의 변형이 발생할 수 있다.
- 동시성 제어
  - 여러 트랜잭션을 성공적으로 실행될 수 있도록 지원하는 기능으로 직렬화 수행을 보장해야 한다.
  - 목적
    - 트랜잭션의 직렬성 보장, 공유도 최대, 응답시간 최소, 시스템 활동의 최대 보장, 데이터의 무결성 및 일관성 보장
  - 기법 종류
    - Locking: 데이터에 잠금을 설정하여 다른 트랜잭션이 접근하지 못하도록 한다 (상호배제)
    - Timestamp: 시스템에서 고유 번호를 부혀아혀 접근 순서를 미리 정한다.
    - 낙관적 검증: 트랜잭션이 종료될 때 적합성을 검증하여 데이터베이스에 최종 반영한다.

### RDB - 동시성 제어
#### Lock
- Locking은 하나의 트랜잭션이 실행하는 동안 특정 데이터 항목에 대해 다른 트랜잭션이 동시에 접근하지 못하도록 하는 상호배제 기능을 제공하는 기법을 말한다.
- 공유잠금(Shared Lock - S Lock)과 배타잠금(Exclusive Lock - X Lock)
  - S Lock: 공유잠금을 설정한 트랜잭션은 데이터 항목에 대해 읽기 연산만 가능하며 다른 트랜잭션도 읽기 연산만을 실행할 수 있다.
    - S Lock이 설정된 Row에는 X Lock을 사용할 수 없다.
    - SELECT ...  FOR SHARE 등 일부 쿼리에서 특정 ROW에 락을 건다.
  - X Lock: 읽기/쓰기 모두 가능한 락으로 동시에 여러개의 베타잠금은 불가능하며 다른 트랜잭션은 읽기, 쓰기 연산 모두 불가능하다.
    - X Lock이 해제될 때까지 다른 트랜잭션은 읽기 작업을 위해 S Lock을 걸거나 쓰기 작업을 위한 X Lock을 걸 수 없다.
    - SELECT ... FOR UPDATE, UPDATE, DELETE 등의 수정 쿼리에서 걸리는 락이다.
- 잠금설정 규칙
  - 트랜잭션은 데이터 항목 x에 대해 read(x) 연산을 실행하기 전에 S-lock(x)이나 X-lock(x) 중 하나 실행
    - write(x) 연산을 실행하기 위해서는 X-lock(x)을 실행해야 한다.
  - 연산 종료 후에는 unlock(x) 연산을 실행해야 한다.
    - S-lock(x)이나 X-lock(x) 연산 실행 후에만 unlock(x) 연산을 실행할 수 있다.
- 잠금 한계
  - 교착상태
  - Lock 대기 시간 발생
  - 직렬 가능한 스케줄이 항상 보장되지 않는다 -> 2단계 잠금 규약(2 Phase Lock)으로 해결 가능

#### Timestamp
- 트랜잭션을 식별하기 위해 RDBMS가 부여하는 식별자로 트랜잭션간의 순서를 선택할 수 있는 동시성 제어 기법
- 운영 방식
  - read_ts(x): 읽기 연산을 성공한 수행한 트랜잭션의 타임스탬프 중 가장 큰 값
  - write_ts(x): 쓰기 연산을 성공한 트랜잭션의 타임스탬프 중 가장 큰 값
- if. Ti Read(X) 수행
  - TS(Ti) < write_TS(x): 다른 트랜잭션이 쓰기 연산을 실행하고 있기 때문에 취소
  - TS(Ti) >= write_TS(x): 쓰기연상 이후에 조회하기 때문에 조회 후에 read_TS(x) 를 TS(Ti)로 업데이트
- if. Ti Write(X) 수행
  - TS(Ti) < read_TS(x): 다른 트랜잭션이 읽기 연산을 실행하고 있기 때문에 취소
  - TS(Ti) >= read_TS(x): 마지막 읽기 연산 이후에 쓰기를 하기 때문에 쓰기 후에 write_TS(x) 를 TS(Ti)로 업데이트
- 한계
  - Rollback 발생 확률이 높으며 Cascading Rollback rksmd

#### 낙관적 검증
- 트랜잭션이 수행하는 동안에는 검사를 하지 않고 종료 시에 일괄적으로 검사하는 기법
  - 트랜잭션 수행하는 동안 그 트랜잭션을 위해 유지되는 데이터 항목들의 지역 사본에 대해서 갱신이 이뤄진다.
  - 트랜잭션 종료 시에 동시성을 위한 트랜잭션 직렬화가 검증되며 일시에 DB 반영
- Read Phase, Validation Phase, Write Phase로 구분
- 한계
  - 장기 트랜잭션 철회 시 자원 낭비

### Redis 를 통한 동시성 해결
#### 분산락과 스핀락의 개념
- 스핀락
  - 락을 얻지 못하면 무한루프를 돌면서 계속 락을 얻으려고 시도하는 동기화 기법
  - 단점
    - 계속 락을 얻으려고 시도하기 떄문에 대기가 길어져 효율이 떨어질 수 있으며 서버에 부하가 발생한다.
- 분산락
  - 여러 서버를 운영하는 분산환경에서 락 처리에 대한 고민을 할 필요성이 있다.
  - 분산락은 데이터베이스 등 공통된 저장소를 이용하여 자원이 사용중인지를 체크하고 그렇기 때문에 전체 서버에 동기화된 처리가 가능하다.

#### Redis Client - Lettuce를 활용한 락 구현
- 락을 획득한다는 것은 락이 존재하는지 확인, 존재하지 않는다면 락을 획득한다는 연산이 필요하며 setnx 명령어를 지원한다.
  - setnx 를 이용하여 레디스에 값이 존재하지 않으면 계속 세팅을 시도하고 락을 획득하여 진행한다.
```java
void doProcess() {
    String lockKey = "LOCK_KEY";
    try {
        while(!tryLock(lockKey)) {
            try { 
                Tread.sleep(50);
            } catch(InterruptedException e) { 
                throw new RuntimeException(e); 
            }
        }
        // doProcess
    } finally {
        unlock(lockKey);
    } 
}
void tryLock(String lockKey) {
    return command.setnx(key, "1");
}
viud unlock(String lockKey) {
    command.del(key);
}
```
- 문제점
  - timeout이 걸려있다.
    - 락을 얻기 위해 무한루프를 돌게 되는데, timeout이 없으면 애기치 못한 상황에 데드락에 빠질 수 있다.
  - Redis 부하
    - 스핀락에 경우 계속 redis에게 setnx 명령을 보내기 때문에 부하를 가하게 된다.

#### Redis Client - Redisson을 활용한 락 구현

- Redisson tryLock()과 세마포어
  ```java
  boolean tryLock(long waitTime, long leaseTime, TimeUnit unit) throws InterruptedException;
  ```
  - waitTime: 락을 사용할 수 있을 때까지 기다리는 시간
  - leaseTime: 시간이 지나면 락이 해제되는 시간
- tryLock() 구현체
  - subscribe 메소드를 호출하는데 내부에서는 Semaphore를 활용하고 있다.
  - Redisson tryLock()을 호출할 시, subscribe 메서드 내부의 getSemaphore 메서드를 호출하여 서버와의 통신을 통해 세마포어를 가져온다.
  - acquire 메서드를 호출하여 락을 획득하게 되는데 이때 지정된 시간 내 락을 얻을 수 있다면 true, 실패하면 false 반환
