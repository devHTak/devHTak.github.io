#### Chap 01. 네트워크 프로그래밍 시작
 

 
##### InetAddress 클래스를 사용한 네트워크 주소

 
- IP 주소는 InetAddress 클래스로 나타낸다.
  - 주소는 식별된 특정 주소로 전송되는 유닛캐스트
  - 하나 이상의 주소로 전송되는 멀티캐스트
- URL을 통하여 InetAddress 가져오기
```java
InetAddress address = InetAddress.getByName("www.packhub.com");
System.out.prinlnt(address); // www.packtpub.com/83.166.169.231
System.out.prinlnt("CanonicalHostName: " + address.getCanonicalHostName()); // www.packtpub.com/83.166.169.231
System.out.prinlnt("HostAddress: " + address.getHostAddress()); // 83.166.169.231
System.out.prinlnt("HostName: " + address.getHostName()); // www.packtpub.com

 
address.isReachable(1000); // 접속여부 테스트, 인자로는 접속 대기시간 입력
```

 
##### NIO 지원

 
- NIO 패키지에 핵심 개념
  - Channel: 애플리케이션 간의 데이터 흐름을 나타낸다
    - FileChannel: 파일과 함께 동작
    - DatagramChannel: UDP 통신 지원
    - SocketChannel: TCP 클라이언트와 함께 사용
    - ServerSocketChannel: TCP 서버와 함께 사용
  - Buffer: 데이터를 처리하기 위한 채널과 함께 동작
    - 문자, 정수, 부동소수점 과 같은 기본 데이터 타입을 지원하는 다양한 버퍼 클래스가 있다.
    - 채널과 버퍼는 통상적으로 연결되어 있다
      - 데이터는 버퍼에서 채널 또는 채널에서 버퍼로 전달된다.
      - 버퍼는 데이터에 대한 임시 저장소
  - Selector: 다중 채널을 처리하기 위한 싱글 스레드를 허용하는 기술
  
- URLConnection 클래스 사용
  - 애플리케이션과 URL 인스턴스간의 연결을 나타낸다
  ```java
  try {
      URL url = new URL("http://www.google.com");
      URLConnection connection = url.openConnection();
      BufferReader br = new BufferReader(new InputStreamReader(urlConnection.getInputStream()));
      String line;
      while((line = br.readLine()) != null) {
          System.out.println(line);
      }
      br.close();
  } catch(IOException e) {
       // 예외처리
  }
  ```
    - openConnection 메소드를 통해 URLConnection 인스턴스 생성
    - BufferReader 인스턴스는 웹 사이트에 연결한 후 출력을 한 줄 단위로 처리
  
  - 버퍼와 채널을 이용한 URLConnection 클래스 사용
    ```java
    try {
        URL url = new URL("http://www.google.com");
        URLConnection connection = url.openConnection();
        InputStream inputStream = urlConnection.getInputStream();
        ReadableByteChannel channel = Channels.newChannel(inputStream);
        ByteBuffer buffer = ByteBuffer.allocate(64);
        String line = null;

 
       while(channel.read(buffer) > 0) {
            System.out.println(new String(buffer.array()));
            buffer.clear();
        }
        channel.close();
    } catch(IOException e) {
        // 예외 처리
    }
    ``` 
    - ReadableByteChannel: read 메소드를 사용해 사이트에서 읽기 작업이 가능
    - ByteBuffer: 채널에서 데이터를 수신하고, read 메소드의 인자로 사용. 생성된 버퍼는 allocate 된 바이트 유지

 
#### 클라이언트 / 서버 아키텍처

 
- 서버
  - IP 주소와 함께 머신에 할당
  - OS에서는 머신에 대한 서비스 요청을 수신할 때 포트 번호로 식별

 
- 클라이언트
  - 클라이언트는 서버에 요청을 전송하며, 서버는 요청을 수신하고 응답을 다시 전송한다

 
- 통신을 위해 사용되는 요청/응답 및 프로토콜의 특성은 서버/클라이언트에 의존
- 소켓
  - 메시지 송수신 하는데에 있어 특정한 소프트웨어 사용하는 데 이를 소켓이라 한다
  - 클라이언트, 서버에 위치하며 소켓이 연결되면 통신이 가능하다
  - Datagram Socket, Stream Socket(주로 TCP 에서 동작), Raw Socket(IP 레벨에서 동작)

 
- 서버
  ```java
  // ServerSocket 은 클라이언트의 요청을 수신하는 서버에서 사용하며 인자는 포트번호
  // accept 메소드로 클라이언트 요청을 수신할 때까지 block 하며, 요청이 수신되면 Socket 클래스를 반환한다
  try(ServerSocket serverSocket = new ServerSocket(6000)) {
      System.out.println("Waiting for Connection....");
      Socket clientSocket = serverSocket.accept();
      System.out.println("Connected to client");

 
     // 텍스트 처리 및 클라이언트 메시지 읽기 위해 BufferReader 사용
      // 클라이언트에 응답하기 위해 PrintWriter 사용하며 두번째 인자로 true는 사용후에 flush 되는 것을 의미
      try(BufferReader br = new BufferReader(new InputStreamReader(clientSocket.getInputStream()));
                PrintWriter out = new PrintWriter(clientScoket.getOutputStream(), true)) {
          String inputLine;
          while((inputLine = br.readLine()) != null) {
              System.out.println("Server: " + inputLine);
              out.println(inputLine);
          }
      } catch(IOException e) {

 
     }
  } catch(IOException e) {
      // 예외 처리
  }

 
 ```

 
- 클라이언트
  ```java
  // Socket에 InetAddress, 포트 번호 전달
  // PrintWriter, InputStream 을 이용하여 클라이언트와 서버 사이의 텍스트를 주고 받을 수 있게 생성
  InetAddress address = InetAddress.getLocalHost();
  try (Socket clientSocket = new Socket(address, 6000);
        PrintWriter out = new PrintWriter(clientSocket.getOutputStream(), true);
        BufferReader br = new BufferReader(new InputStreamReader(clientSocket.getInputStrea()))
  ) {
      System.out.println("Connect to Server.");
      Scanner scanner = new Scanner(System.in);
      while(true) {
          System.out.print("Enter text: ");
          String inputLine = scanner.nextLine();
          
          if("quit".equals(inputLine)) break;

 
         out.println(inputLine);
          String response = br.readLine();
          System.out.println("Server response: " + response);
      }
  } catch(IOException e) {
      // 예외 처리
  }
  ```
- 자바 8으로 리팩토링
  - 서버
  ```java
  // before
  String inputLine;
  while((inputLine = br.readLine()) != null) {
      System.out.println("Client request: " + inputLine);
      out.println(inputLine);
  }
  
  // after
  Supplier<String> socketInput = () => {
      try {
          return br.readLine();
      } catch(IOException ex) {
            return null;
      }
  };
 
  Stream.generate(socketInput)
          .map(s -> {
              System.out.println("Client request: " + s);
              out.println(s);
              return s;
          }).allMatch(s -> s != null);
  ```
 
  - 클라이언트
  ```java
  // before
  while(true) {
      System.out.print("Enter text: ");
      String inputLine = scanner.nextLine();
      if("quit".equals(inputLine)) {
          break;
      }
 
      out.println(inputLine);
      String response = br.readLine();
      System.out.println("Server response: " + response);
  }
  
  // after
  Supplier<String> scannerInput = () -> scanner.next();
 
  System.out.print("Enter text: ");
  Stream.generate(scannerInput
          .map(s -> {
              out.println(s);
              System.out.println("Server response: " + s);
              System.out.print("Enter text: ");
              return s;
          }).allMatch(s -> !"quit".equals(s));
  ```
 
##### UDP 와 멀티 캐스팅
 
- 멀티캐스팅은 주기적으로 그룹에 메시지를 전송해야 할 때 유용한 기술
- 그룹은 멀티캐스트 주소로 식별되며 IP 주소 범위를 사용하여 모든 구성원에게 동일한 메시지 전송
- 서버
  ```java
  System.out.println("Multicast Time Server");
  DatagramSocket serverSocket = null;
  try {
      serverSocket = new DatagramSocket();
      
      while(true) {
          String dateText = new Date().toString();
          byte[] buffer = new byte[256];
          buffer = dateText.getBytes();
 
          InetAddress group = InetAddress.getByName("244.0.0.0");
          DatagramPacket packet = new DatagramPacket(buffer, buffer.length, group, 8888);
          serverSocket.send(packet);
          System.out.println("Time sent: " + dateText);
 
          try {
                Thread.sleep(1000);
          } catch(InterruptedException ex) {
                // 예외 처리
          }
      }
  } catch(SocketException e) {
      // 예외처리
  } catch(IOException e) {
      // 예외처리
  }
  ```
  - InetAddress 를 통해 멀티캐스트 그룹 생성
  - 메시지 배열과 멀티캐스트 그룹을 통해 DatagramPacket 생성하며, DatagramSocket의 send 메소드에서 인자로 사용되며 전송된 데이터와 시간을 나타낸다
 
- 클라이언트
  ```java
  System.out.println("Multicast Time Client");
  try(MulticastSocket socket = new MulticastSocket(8888)) {
      InetAddress group = new InetAddress("224.0.0.0");
      socket.joinGroup(group);
 
      System.out.println("Multicast Group Joined");
      byte[] buffer = new byte[255];
      DatagramPacket packet = new DatagramPacket(buffer, buffer.length);
 
      for(int i = 0; i < 5; i++) {
          socket.receive(packet);
          String received = new String(packet.getData());
          System.out.println(received.trim());
      }
      socket.leaveGroup(group);
  } catch(IOException ex) {
      // 예외처리
  }
 
  System.out.println("Multicast Time Client Terminated");
  ```
  - 서버와 동일한 그룹의 주소 및 포트 번호로 MulticastSocket 생성 및 joinGroup으로 그룹에 가입
  - 날짜와 시간 메시지를 5회 수신하여 출력 및 종료
##### 출처
- 에이콘 출판사. 자바 네트워크 프로그래밍. 리차드 리스 지음, 유연재 옮김
